// trouve le maximum de sommes de 2 nombres qui sont puissances de 2 dans un ensemble N d'entiers sign√©s
// best lnown solutions: https://oeis.org/A352178/a352178_5.txt
// 5 --- nb pow2 = 6 :             {-3,-1,3,5,11}  -3+5=2 -3+11=8 -1+3=2 -1+5=4 3+5=8 5+11=16
// 6 NEW nb pow2 = 7 :             {-3,-1,1,3,5,7}  -3+5=2 -3+7=4 -1+3=2 -1+5=4 1+3=4 1+7=8 3+5=8
// 7 NEW nb pow2 = 9 :          {-5,-3,-1,3,5,7,9}  -5+7=2 -5+9=4 -3+5=2 -3+7=4 -1+3=2 -1+5=4 -1+9=8 3+5=8 7+9=16
// 8 NEW nb pow2 = 11 :         {-5,-3,-1,1,3,5,7,9}  -5+7=2 -5+9=4 -3+5=2 -3+7=4 -1+3=2 -1+5=4 -1+9=8 1+3=4 1+7=8 3+5=8 7+9=16
// 9 --- nb pow2 = 13 :      {-7,-5,-3,-1,3,5,7,9,11}  -7+9=2 -7+11=4 -5+7=2 -5+9=4 -3+5=2 -3+7=4 -3+11=8 -1+3=2 -1+5=4 -1+9=8 3+5=8 5+11=16 7+9=16
// 10 NEW nb pow2 = 15 :     {-7,-5,-3,-1,1,3,5,7,9,11}  -7+9=2 -7+11=4 -5+7=2 -5+9=4 -3+5=2 -3+7=4 -3+11=8 -1+3=2 -1+5=4 -1+9=8 1+3=4 1+7=8 3+5=8 5+11=16 7+9=16
// 11 NEW nb pow2 = 17 :  {-9,-7,-5,-3,-1,3,5,7,9,11,13}  -9+11=2 -9+13=4 -7+9=2 -7+11=4 -5+7=2 -5+9=4 -5+13=8 -3+5=2 -3+7=4 -3+11=8 -1+3=2 -1+5=4 -1+9=8 3+5=8 3+13=16 5+11=16 7+9=16
// 12 NEW nb pow2 = 19 :  {-9,-7,-5,-3,-1,1,3,5,7,9,11,13}  -9+11=2 -9+13=4 -7+9=2 -7+11=4 -5+7=2 -5+9=4 -5+13=8 -3+5=2 -3+7=4 -3+11=8 -1+3=2 -1+5=4 -1+9=8 1+3=4 1+7=8 3+5=8 3+13=16 5+11=16 7+9=16
// 13 NEW nb pow2 = 21 : {-11,-7,-5,-3,-1,1,3,5,7,9,11,13,15}  -11+13=2 -11+15=4 -7+9=2 -7+11=4 -7+15=8 -5+7=2 -5+9=4 -5+13=8 -3+5=2 -3+7=4 -3+11=8 -1+3=2 -1+5=4 -1+9=8 1+3=4 1+7=8 1+15=16 3+5=8 3+13=16 5+11=16 7+9=16
// 14 NEW nb pow2 = 24 : {-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17}  -9+11=2 -9+13=4 -9+17=8 -7+9=2 -7+11=4 -7+15=8 -5+7=2 -5+9=4 -5+13=8 -3+5=2 -3+7=4 -3+11=8 -1+3=2 -1+5=4 -1+9=8 -1+17=16 1+3=4 1+7=8 1+15=16 3+5=8 3+13=16 5+11=16 7+9=16 15+17=32
// 15 NEW nb pow2 = 26 : {-13,-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17}  -13+15=2 -13+17=4 -9+11=2 -9+13=4 -9+17=8 -7+9=2 -7+11=4 -7+15=8 -5+7=2 -5+9=4 -5+13=8 -3+5=2 -3+7=4 -3+11=8 -1+3=2 -1+5=4 -1+9=8 -1+17=16 1+3=4 1+7=8 1+15=16 3+5=8 3+13=16 5+11=16 7+9=16 15+17=32
// 16 --- nb pow2 = 29 : {-11,-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17,19}  -11+13=2 -11+15=4 -11+19=8 -9+11=2 -9+13=4 -9+17=8 -7+9=2 -7+11=4 -7+15=8 -5+7=2 -5+9=4 -5+13=8 -3+5=2 -3+7=4 -3+11=8 -3+19=16 -1+3=2 -1+5=4 -1+9=8 -1+17=16 1+3=4 1+7=8 1+15=16 3+5=8 3+13=16 5+11=16 7+9=16 13+19=32 15+17=32
// 17 NEW nb pow2 = 31 : {-15,-11,-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17,19}  -15+17=2 -15+19=4 -11+13=2 -11+15=4 -11+19=8 -9+11=2 -9+13=4 -9+17=8 -7+9=2 -7+11=4 -7+15=8 -5+7=2 -5+9=4 -5+13=8 -3+5=2 -3+7=4 -3+11=8 -3+19=16 -1+3=2 -1+5=4 -1+9=8 -1+17=16 1+3=4 1+7=8 1+15=16 3+5=8 3+13=16 5+11=16 7+9=16 13+19=32 15+17=32
// 18 --- nb pow2 = 34 : {-13,-11,-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17,19,21}  -13+15=2 -13+17=4 -13+21=8 -11+13=2 -11+15=4 -11+19=8 -9+11=2 -9+13=4 -9+17=8 -7+9=2 -7+11=4 -7+15=8 -5+7=2 -5+9=4 -5+13=8 -5+21=16 -3+5=2 -3+7=4 -3+11=8 -3+19=16 -1+3=2 -1+5=4 -1+9=8 -1+17=16 1+3=4 1+7=8 1+15=16 3+5=8 3+13=16 5+11=16 7+9=16 11+21=32 13+19=32 15+17=32
// 19 NEW nb pow2 = 36 : {-17,-13,-11,-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17,19,21}  -17+19=2 -17+21=4 -13+15=2 -13+17=4 -13+21=8 -11+13=2 -11+15=4 -11+19=8 -9+11=2 -9+13=4 -9+17=8 -7+9=2 -7+11=4 -7+15=8 -5+7=2 -5+9=4 -5+13=8 -5+21=16 -3+5=2 -3+7=4 -3+11=8 -3+19=16 -1+3=2 -1+5=4 -1+9=8 -1+17=16 1+3=4 1+7=8 1+15=16 3+5=8 3+13=16 5+11=16 7+9=16 11+21=32 13+19=32 15+17=32
// 20 NEW nb pow2 = 39 : {-15,-13,-11,-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17,19,21,23}  -15+17=2 -15+19=4 -15+23=8 -13+15=2 -13+17=4 -13+21=8 -11+13=2 -11+15=4 -11+19=8 -9+11=2 -9+13=4 -9+17=8 -7+9=2 -7+11=4 -7+15=8 -7+23=16 -5+7=2 -5+9=4 -5+13=8 -5+21=16 -3+5=2 -3+7=4 -3+11=8 -3+19=16 -1+3=2 -1+5=4 -1+9=8 -1+17=16 1+3=4 1+7=8 1+15=16 3+5=8 3+13=16 5+11=16 7+9=16 9+23=32 11+21=32 13+19=32 15+17=32
// 21 NEW nb pow2 = 41 : {-19,-15,-13,-11,-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17,19,21,23}  -19+21=2 -19+23=4 -15+17=2 -15+19=4 -15+23=8 -13+15=2 -13+17=4 -13+21=8 -11+13=2 -11+15=4 -11+19=8 -9+11=2 -9+13=4 -9+17=8 -7+9=2 -7+11=4 -7+15=8 -7+23=16 -5+7=2 -5+9=4 -5+13=8 -5+21=16 -3+5=2 -3+7=4 -3+11=8 -3+19=16 -1+3=2 -1+5=4 -1+9=8 -1+17=16 1+3=4 1+7=8 1+15=16 3+5=8 3+13=16 5+11=16 7+9=16 9+23=32 11+21=32 13+19=32 15+17=32
// 22 NEW nb pow2 = 44 : {-17,-15,-13,-11,-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17,19,21,23,25}  -17+19=2 -17+21=4 -17+25=8 -15+17=2 -15+19=4 -15+23=8 -13+15=2 -13+17=4 -13+21=8 -11+13=2 -11+15=4 -11+19=8 -9+11=2 -9+13=4 -9+17=8 -9+25=16 -7+9=2 -7+11=4 -7+15=8 -7+23=16 -5+7=2 -5+9=4 -5+13=8 -5+21=16 -3+5=2 -3+7=4 -3+11=8 -3+19=16 -1+3=2 -1+5=4 -1+9=8 -1+17=16 1+3=4 1+7=8 1+15=16 3+5=8 3+13=16 5+11=16 7+9=16 7+25=32 9+23=32 11+21=32 13+19=32 15+17=32
// 23 NEW nb pow2 = 46 : {-21,-17,-15,-13,-11,-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17,19,21,23,25}  -21+23=2 -21+25=4 -17+19=2 -17+21=4 -17+25=8 -15+17=2 -15+19=4 -15+23=8 -13+15=2 -13+17=4 -13+21=8 -11+13=2 -11+15=4 -11+19=8 -9+11=2 -9+13=4 -9+17=8 -9+25=16 -7+9=2 -7+11=4 -7+15=8 -7+23=16 -5+7=2 -5+9=4 -5+13=8 -5+21=16 -3+5=2 -3+7=4 -3+11=8 -3+19=16 -1+3=2 -1+5=4 -1+9=8 -1+17=16 1+3=4 1+7=8 1+15=16 3+5=8 3+13=16 5+11=16 7+9=16 7+25=32 9+23=32 11+21=32 13+19=32 15+17=32
// ...
// 32 NEW nb pow2 = 71 : {-27,-25,-23,-21,-19,-17,-15,-13,-11,-9,-7,-5,-3,-1,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35}  -27+29=2 -27+31=4 -27+35=8 -25+27=2 -25+29=4 -25+33=8 -23+25=2 -23+27=4 -23+31=8 -21+23=2 -21+25=4 -21+29=8 -19+21=2 -19+23=4 -19+27=8 -19+35=16 -17+19=2 -17+21=4 -17+25=8 -17+33=16 -15+17=2 -15+19=4 -15+23=8 -15+31=16 -13+15=2 -13+17=4 -13+21=8 -13+29=16 -11+13=2 -11+15=4 -11+19=8 -11+27=16 -9+11=2 -9+13=4 -9+17=8 -9+25=16 -7+9=2 -7+11=4 -7+15=8 -7+23=16 -5+7=2 -5+9=4 -5+13=8 -5+21=16 -3+5=2 -3+7=4 -3+11=8 -3+19=16 -3+35=32 -1+3=2 -1+5=4 -1+9=8 -1+17=16 -1+33=32 1+3=4 1+7=8 1+15=16 1+31=32 3+5=8 3+13=16 3+29=32 5+11=16 5+27=32 7+9=16 7+25=32 9+23=32 11+21=32 13+19=32 15+17=32 29+35=64 31+33=64


#define _CRT_SECURE_NO_WARNINGS 1

// only compute odd numbers
#define STEP 2  

#include <iostream>

#define NMAX 1024

int vmax = 5;
int N = 5;
int t[NMAX];
int nbPow2Max = 1;
bool stopAtFirstFound = false;
__inline bool isPow2(const int v) {
    if (v <= 0) return false;  
    return (v & (v - 1)) == 0;  // see https://stackoverflow.com/questions/600293/how-to-check-if-a-number-is-a-power-of-2
    /*
    for (int cmp = 2; ; cmp += cmp) {
        if (v == cmp) return true;
        if (v < cmp) break;
    }
    return false;
    */
}
void dispT(const int prof) {
    printf("t=["); for (int i = 0; i < prof; i++) {
        if (i != 0) printf(","); printf("%d", t[i]);
    }
    printf("]\n");
}
void R(const int prof, const int nbNeg, const int nbSur2) {
    // printf("R(%d,%d,%d) t[prof-1]=%d\n",prof, nbNeg, nbSur2, t[prof - 1]);
    // dispT(prof);
    if (nbNeg > nbSur2) return;
    if (prof == N) {
        // compte le nombre de paires qui sont puissances de 2
        int nbPow2 = 0;
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                if (isPow2(t[i] + t[j])) nbPow2++;
            }
        }
        // printf("    FINITO nbPow2=%d\n", nbPow2);
        if (nbPow2 > nbPow2Max) {
            nbPow2Max = nbPow2;
            printf("nb pow2 = %d : {", nbPow2);
            for (int i = 0; i < N; i++) {
                if (i != 0) printf(",");
                printf("%d", t[i]);
            }
            printf("} ");
            for (int i = 0; i < N; i++) {
                for (int j = i + 1; j < N; j++) {
                    if (isPow2(t[i] + t[j])) printf(" %d+%d=%d", t[i], t[j], t[i] + t[j]);
                }
            }
            printf("\n");
            if (stopAtFirstFound) exit(0);
        }
        return;
    }
    int iDep = t[prof - 1] + STEP;

    // printf("prof=%d iDep=%d vmax=%d\n", prof, iDep, vmax);
    // negative numbers
    for (int i = iDep; i < 0; i+= STEP) {
        t[prof] = i;
        R(prof + 1, nbNeg + 1, nbSur2);
    }
    int i0 = (iDep > 1) ?  iDep : 1;
    // positive numbers
    for (int i = i0; i <= vmax; i+= STEP) {
        // printf("prof=%d i=%d [%d,%d]\n", prof, i, i0, vmax);
        t[prof] = i;
        R(prof + 1, nbNeg, nbSur2);
    }
}
void R0(const int nbSur2) {             // at least 1st number is negative
    for (int i = -vmax; i < 0; i += STEP) {
        t[0] = i;
        R(1, 1, nbSur2);
    }
}
int main(int argc, char** argv)
{
    if (argc == 1 || (argc > 1 && !strncmp(argv[1], "-h", 2))) {
        printf("usage: %s N [fast | vmin [vmax]]\nSeach for max pairs with sum a pow of 2 in a N set.\n", argv[0]);
        printf("Ex: %s 17 5 19 will search 17 length set with values from [-5, 5] to [-19, 19]\n", argv[0]);
        printf("Ex: %s 20 fast will search 20 length set with fast method (may not find the best solution)\n", argv[0]);
        return 1;
    }
    if (STEP == 2) printf("step=2 : only search for odd values\n"); else printf("step=1 : search for odd and even values\n");
    if (argc > 1) sscanf(argv[1], "%d", &N);
    if (argc > 2) {
        if (!strcmp(argv[2], "fast")) {
            if (N & 1) {
                printf("fast only available for even N.\n");
                return(1);
            }
            int nbSym = (N / 2) - 2; // 10 => 4 : -1,-3,-5,-7,1,3,5,7
            int j = 0;
            int xmax = nbSym * 2 - 1;
            for (int i = 0, x = 0; i < nbSym; i++, x += 2) t[j++] = -(xmax - x);
            for (int i = 0, x = 1; i < nbSym; i++, x += 2) t[j++] = x;
            dispT(j);
            printf("Trying to complete t with [%d,...]\n", t[j - 1] + 2);
            stopAtFirstFound = true;
            for (vmax = t[j - 1] + 2;; vmax += STEP) {
                R(j, nbSym, N / 2);
            }
            return 0;
        }
        else sscanf(argv[2], "%d", &vmax);
    }
    if (argc > 3) {
        int vmaxMax;
        sscanf(argv[3], "%d", &vmaxMax);
        printf("Searching pow2 pairs in %d numbers in [-%d,%d] to [-%d,%d]...\n", N, vmax, vmax, vmaxMax, vmaxMax);
        for (; vmax <= vmaxMax; vmax += STEP) {
            printf("Searching pow2 pairs in %d numbers in [-%d,%d]...\n", N, vmax, vmax);
            R0(N/2);
        }
    }
    else {
        printf("Searching pow2 pairs in %d numbers in [-%d,%d]...\n", N, vmax, vmax);
        R0(N / 2);
    }
    printf("Finito.\n");
}
